Overview of Single Source Shortest Path
Report Issue


Previously, we used the “breadth-first search” algorithm to find the “shortest path” between two vertices.
However, the “breadth-first search” algorithm can only solve the “shortest path” problem in “unweighted graphs”.
But in real life, we often need to find the “shortest path” in a “weighted graph”.

For example, there may be many routes from your home to a target location, such as a bus station,
and the time needed for each route may be different. The route with the shortest distance may not be the one that requires the least amount of time because of the speed limit and traffic jams. So, if we want to find the route that takes the least time from home to a certain bus station, then the weights should be time instead of distance. With that in mind, how can we solve the “shortest path” problem given two vertices in a “weighted graph”?

The main focus of this chapter is to solve such “single source shortest path” problems. Given the starting vertex, find the “shortest path” to any of the vertices in a weighted graph. Once we solve this, we can easily acquire the shortest paths between the starting vertex and a given target vertex.



Edge Relaxation
In the following video, we'll talk about an Edge Relaxation operation that is a key element in solving the “single-source shortest path” problem.



An alternative way to understand why this process is called ‘relaxation’ is to imagine that each path is a rubber band of length 1.
 The original path from A to D is of length 3, so the rubber band was stretched to 3 times its original length. When we relax the path to length 2, by visiting C first, the rubber band is now only stretched to twice its length, so you can imagine the rubber band being relaxed, hence the term edge relaxation.



In this chapter, we will learn two “single source shortest path” algorithms:

Dijkstra’s algorithm
Bellman-Ford algorithm
“Dijkstra's algorithm” can only be used to solve the “single source shortest path” problem in a graph with non-negative weights.

“Bellman-Ford algorithm”, on the other hand, can solve the “single-source shortest path” in a weighted directed graph with any weights, including, of course, negative weights.