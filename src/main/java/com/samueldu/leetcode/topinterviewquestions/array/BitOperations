To recap, for a binary number, each bit can take a value of 0 or 1. We can use a binary number with 9 digits to represent whether numbers 1 through 9 have been visited or not. Now the question is, "how do we set a bit to 1 when a number is seen and how do we check if a bit is already set to 1?" Let's first review the two most commonly used operations for get and set in bitmasking. Such operations on bits are commonly referred to as bitwise operations.

Check if the i^{th}i
th
  bit of a binary number is set to 1: x & (1 << i). If this expression evaluates to 0, the bit is not set. Let's elaborate on how this works:

1 << i means the number 1 is bit shifted to the left i times. For example, 1 << 2 changes the number 1 ('0001') to the number 4 ('0100'). Notice that in the binary representation, the 1 is shifted two places to the left.

Bitwise AND (&) returns only the bits that are set in both the left and right operand. For example, 5 & 4 = '0101' & '0100' = '0100' = 4. Notice that in the binary representation, the only remaining set bit is the bit that was set in both numbers. One more example for clarity, 10 & 4 = '1010' & '0100' = '0000' = 0. When two numbers do not share any set bits, bitwise AND returns 0, otherwise, it will return a nonzero value. This is why we can use bitwise AND to check if the i^{th}i
th
  bit from the right has been set.

Set the i^{th}i
th
  bit of a binary number x to 1: x = x | (1 << i)

Bitwise OR (|) returns the bits that are set in the left or right operand. For example, 10 | 4 = '1010' | '0100' = '1110' = 14. Notice that the third bit from the right has been set (changed from 0 to 1). This is why we can use x = x | (1 << i) to set the i^{th}i
th
  bit from the right in the integer x.

  Here we use 9 bits to represent numbers 1 to 9. You might wonder, if these numbers are not continuous, can we still use bitmasking to represent the presence or absence of each number? The answer is yes. For instance, if we know upfront that the possible discrete values are [1, 9, 10, 100] (any small set of possible values), we can use a hashmap {1:0, 9:1, 10:2, 100:3} to track the correspondence between possible values and positions in the binary number. So, we can use a 4-digit binary number to represent the status of each number in [1, 9, 10, 100], even though these numbers are not continuous.

  To better understand bit manipulation, you may check out this post
  https://leetcode.com/problems/sum-of-two-integers/discuss/84278/A-summary%3A-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently
   (A summary: how to use bit manipulation to solve problems easily and efficiently) by @LHearen.